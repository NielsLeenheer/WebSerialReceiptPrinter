{"version":3,"file":"webserial-receipt-printer.umd.js","sources":["../src/event-emitter.js","../src/main.js"],"sourcesContent":["class EventEmitter {\n    constructor(device) {\n        this._events = {};\n    }\n\n    on(e, f) {\n        this._events[e] = this._events[e] || [];\n        this._events[e].push(f);\n    }\n\n    emit(e, ...args) {\n        let fs = this._events[e];\n        if (fs) {\n            fs.forEach(f => {\n                setTimeout(() => f(...args), 0);\n            });\n        }\n    }        \n}\n\nexport default EventEmitter;","import EventEmitter from \"./event-emitter.js\";\n\nclass ReceiptPrinterDriver {}\n\nclass WebSerialReceiptPrinter extends ReceiptPrinterDriver {\n\n\t#emitter;\n\n\t#options = {};\n\t#port = null;\n\t#reader = null;\n\t#queue = [];\n\t#state = {\n\t\trunning:\tfalse,\n\t\tclosing:\tfalse\n\t}\n\n\tconstructor(options) {\n\t\tsuper();\n\t\t\n\t\tthis.#emitter = new EventEmitter();\n\n\t\tthis.#options =\tObject.assign({\n\t\t\tbaudRate:\t\t9600,\n\t\t\tbufferSize:\t\t255,\n\t\t\tdataBits:\t\t8,\n\t\t\tflowControl:\t'none',\n\t\t\tparity:\t\t\t'none',\n\t\t\tstopBits:\t\t1\n\t\t}, options);\n\n\t\tnavigator.serial.addEventListener('disconnect', event => {\n\t\t\tif (this.#port == event.target) {\n\t\t\t\tthis.#emitter.emit('disconnected');\n\t\t\t}\n\t\t});\n\t}\n\n\tasync connect() {\n\t\ttry {\n\t\t\tlet port = await navigator.serial.requestPort();\n\t\t\t\n\t\t\tif (port) {\n\t\t\t\tawait this.#open(port);\n\t\t\t}\n\t\t}\n\t\tcatch(error) {\n\t\t\tconsole.log('Could not connect! ' + error);\n\t\t}\n\t}\n\n\tasync reconnect(previousPort) {\n\t\tif (!previousPort.vendorId || !previousPort.productId) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet ports = await navigator.serial.getPorts();\n\n\t\tlet matches = ports.filter(port => {\n\t\t\tlet info = port.getInfo();\n\t\t\treturn info.usbVendorId == previousPort.vendorId && info.usbProductId == previousPort.productId;\n\t\t})\n\n\t\tif (matches.length == 1) {\n\t\t\tawait this.#open(matches[0]);\n\t\t}\n\t}\n\n\tasync #open(port) {\n\t\tthis.#port = port;\n\t\tthis.#state.closing = false;\n\n\t\tawait this.#port.open(this.#options);\n\n\t\tlet info = this.#port.getInfo();\n\t\t\n\t\tthis.#emitter.emit('connected', {\n\t\t\ttype:\t\t\t\t'serial',\n\t\t\tvendorId: \t\t\tinfo.usbVendorId || null,\n\t\t\tproductId: \t\t\tinfo.usbProductId || null,\n\t\t\tlanguage: \t\t\tnull,\n\t\t\tcodepageMapping:\tnull\n\t\t});\n\t}\n\n\tasync disconnect() {\n\t\tif (!this.#port) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#state.closing = true;\n\t\tthis.#reader.cancel();\n\n\t\tawait this.#reader.closed;\n\t\tawait this.#port.close();\n\n\t\tthis.#port = null;\n\n\t\tthis.#emitter.emit('disconnected');\n\t}\n\n\tasync listen() {\n\t\tthis.#read();\n\t\treturn true;\n\t}\n\n\tasync #read() {\n\t\twhile (this.#port.readable && this.#state.closing === false) {\n            this.#reader = this.#port.readable.getReader();\n\n\t\t\ttry {\n\t\t\t\twhile (true) {\n                    const { value, done } = await this.#reader.read();\n\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tthis.#emitter.emit('data', value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t} finally {\n\t\t\t\tthis.#reader.releaseLock();\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tasync print(command) {\n\t\tthis.#queue.push(command);\n\t\tthis.run();\n\t};\n\n\tasync run() {\n\t\tif (this.#state.closing) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (this.#state.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#state.running = true;\n\n\t\tconst writer = this.#port.writable.getWriter();\n\n\t\tlet command;\n\n\t\twhile (command = this.#queue.shift()) {\n\t\t\tawait writer.write(command);\n\t\t}\n\n\t\twriter.releaseLock();\n\n\t\tthis.#state.running = false;\n\t}\n\n\taddEventListener(n, f) {\n\t\tthis.#emitter.on(n, f);\n\t}\n}\n\nexport default WebSerialReceiptPrinter;"],"names":["EventEmitter","constructor","device","this","_events","on","e","f","push","emit","args","fs","forEach","setTimeout","ReceiptPrinterDriver","emitter","options","port","reader","queue","state","running","closing","super","Object","assign","baudRate","bufferSize","dataBits","flowControl","parity","stopBits","navigator","serial","addEventListener","event","target","async","requestPort","open","error","console","log","previousPort","vendorId","productId","matches","getPorts","filter","info","getInfo","usbVendorId","usbProductId","length","type","language","codepageMapping","cancel","closed","close","read","readable","getReader","value","done","releaseLock","command","run","writer","writable","getWriter","shift","write","n"],"mappings":"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"}